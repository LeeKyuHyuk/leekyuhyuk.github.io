{"pageProps":{"excerpt":" 아래와 같은 UI가 있다고 가정해봅시다. Root의 State에 itemList 라는 값이 있고, 이 값을 변경시키는 handleSetItemList() 라는 함수가 있습니다. 상품을 장바구니에 넣을 때, ProductItem 에서는 itemList 의 값을 바꾸기 위해 handleS","url":"/article/react/2021/07/22/React-Context-API","frontmatter":{"title":"[React] Context를 사용하여 더 효율적으로 작업해보기","date":"2021-07-22 00:49:09","category":"React"},"content":"\r\n아래와 같은 UI가 있다고 가정해봅시다.  \r\n![Example UI](/assets/image/2021-07-23-React-Context-API/2021-07-23-React-Context-API_1.png)\r\n\r\n![Example Structure](/assets/image/2021-07-23-React-Context-API/2021-07-23-React-Context-API_2.png)\r\n\r\nRoot의 State에 `itemList`라는 값이 있고, 이 값을 변경시키는 `handleSetItemList()`라는 함수가 있습니다.  \r\n상품을 장바구니에 넣을 때, `ProductItem`에서는 `itemList`의 값을 바꾸기 위해 `handleSetItemList()`를호출하고, `BasketHeader`에서는 `itemList`의 값을 이용하여 장바구니에 몇 개가 담겼는지 표시해 줍니다 .  \r\n위의 요구 사항을 구현하기 위해서는 `itemList`와 `handleSetItemList()` 함수를 Props를 사용하여 하위컴포넌트에게 전달을 해야 합니다.\r\n\r\n만약 하위 컴포넌트가 엄청 많고 복잡하다면 어떻게 해야 할까요? 계속 아래로 전달해야 할까요?\r\n\r\n## React Context를 사용합시다!\r\n\r\nReact 16.3부터 Context API가 추가되었으며, Context를 사용하면 더 간편하게 값을 읽고 설정할 수 있습니다.\r\n\r\n코드를 간단하게 짜보도록 하겠습니다.\r\n\r\n**src/index.tsx :**\r\n\r\n```tsx\r\nimport * as React from 'react';\r\nimport * as ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n```\r\n\r\n**src/Types.ts :**\r\n\r\n```ts\r\nexport type Item = {\r\n  name: string;\r\n  price: number;\r\n};\r\n```\r\n\r\n**src/App.tsx :**\r\n\r\n```tsx\r\nimport * as React from 'react';\r\nimport Content from './Content';\r\nimport Header from './Header';\r\n\r\nconst App = () => {\r\n  return (\r\n    <>\r\n      <Header />\r\n      <Content />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n```\r\n\r\n**src/Header.tsx :**\r\n\r\n```tsx\r\nimport * as React from 'react';\r\nimport BasketHeader from './BasketHeader';\r\n\r\nconst Header = () => {\r\n  return (\r\n    <>\r\n      <BasketHeader />\r\n      <br />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n```\r\n\r\n**src/BasketHeader.tsx :**\r\n\r\n```tsx\r\nimport * as React from 'react';\r\n\r\nconst BasketHeader = () => {\r\n  return (\r\n    <>\r\n      <span>이곳에 장바구니의 개수가 출력됩니다.</span>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default BasketHeader;\r\n```\r\n\r\n**src/Content.tsx :**\r\n\r\n```tsx\r\nimport * as React from 'react';\r\nimport ProductList from './ProductList';\r\n\r\nconst Content = () => {\r\n  return (\r\n    <>\r\n      <ProductList />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Content;\r\n```\r\n\r\n**src/ProductList.tsx :**\r\n\r\n```tsx\r\nimport * as React from 'react';\r\nimport ProductItem from './ProductItem';\r\nimport { Item } from './Types';\r\n\r\nconst ProductList = () => {\r\n  const foods: Item[] = [\r\n    { name: '탕수육', price: 10000 },\r\n    { name: '마라탕', price: 7500 },\r\n  ];\r\n\r\n  return (\r\n    <>\r\n      {foods.map((food, index) => {\r\n        return <ProductItem key={index} food={food} />;\r\n      })}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ProductList;\r\n```\r\n\r\n**src/ProductItem.tsx :**\r\n\r\n```tsx\r\nimport * as React from 'react';\r\nimport { Item } from './Types';\r\n\r\ntype ProductItemProps = {\r\n  food: Item;\r\n};\r\n\r\nconst ProductItem = ({ food }: ProductItemProps) => {\r\n  return (\r\n    <>\r\n      <p>\r\n        {food.name} - {food.price}원\r\n      </p>\r\n      <button>장바구니 담기 +</button>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ProductItem;\r\n```\r\n\r\n모두 작성했다면, 아래와 같은 화면이 출력 될 것입니다.  \r\n![Example React View](/assets/image/2021-07-23-React-Context-API/2021-07-23-React-Context-API_3.png)\r\n\r\n이 화면에서 장바구니 담기를 누르면, Console 창에 무엇이 담겼는지 출력되고 위에 장바구니 개수가 출력되는 것을 간단하게 구현해보려고 합니다.\r\n\r\n**src/BasketContext.tsx :**\r\n\r\n```tsx\r\nimport * as React from 'react';\r\nimport { Item } from './Types';\r\n\r\nexport enum Action {\r\n  SET = 'SET',\r\n}\r\n\r\ntype BasketAction = {\r\n  type: Action;\r\n  itemList: Item[];\r\n};\r\n\r\ntype BasketState = {\r\n  itemList: Item[];\r\n};\r\n\r\ntype BasketDispatch = React.Dispatch<BasketAction>;\r\n\r\nexport const BasketStateContext = React.createContext<BasketState | null>(null);\r\nexport const BasketDispatchContext = React.createContext<BasketDispatch | null>(null);\r\n\r\nexport const reducer = (state: BasketState, action: BasketAction): BasketState => {\r\n  switch (action.type) {\r\n    case Action.SET:\r\n      return {\r\n        ...state,\r\n        itemList: state.itemList.concat(action.itemList),\r\n      };\r\n    default:\r\n      throw new Error('Unhandled action');\r\n  }\r\n};\r\n```\r\n\r\n**src/BasketProvider.tsx :**\r\n\r\n```tsx\r\nimport * as React from 'react';\r\nimport { BasketDispatchContext, BasketStateContext, reducer } from './BasketContext';\r\n\r\nconst BasketProvider = ({ children }: { children: React.ReactNode }) => {\r\n  const [state, dispatch] = React.useReducer(reducer, {\r\n    itemList: [],\r\n  });\r\n\r\n  return (\r\n    <BasketStateContext.Provider value={state}>\r\n      <BasketDispatchContext.Provider value={dispatch}>{children}</BasketDispatchContext.Provider>\r\n    </BasketStateContext.Provider>\r\n  );\r\n};\r\n\r\nexport default BasketProvider;\r\n```\r\n\r\n**src/BasketHook.tsx :**\r\n\r\n```tsx\r\nimport * as React from 'react';\r\nimport { BasketDispatchContext, BasketStateContext } from './BasketContext';\r\n\r\nexport function useBasketState() {\r\n  const state = React.useContext(BasketStateContext);\r\n  if (!state) throw new Error('Cannot find BasketProvider');\r\n  return state;\r\n}\r\n\r\nexport function useBasketDispatch() {\r\n  const dispatch = React.useContext(BasketDispatchContext);\r\n  if (!dispatch) throw new Error('Cannot find BasketProvider');\r\n  return dispatch;\r\n}\r\n```\r\n\r\n이제 Context, Provider, Custom Hooks 모두 준비가 완료되었습니다.  \r\n`index.tsx`를 아래와 같이 수정하면, `App` 컴포넌트 안에 있는 모든 곳에서 `state`와 `dispatch`를 위에서 만든 Custom Hooks를 사용하여 쉽게 사용할 수 있습니다.\r\n\r\n**src/index.tsx :**\r\n\r\n```tsx\r\nimport * as React from 'react';\r\nimport * as ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport BasketProvider from './BasketProvider';\r\n\r\nReactDOM.render(\r\n  <BasketProvider>\r\n    <App />\r\n  </BasketProvider>,\r\n  document.getElementById('root')\r\n);\r\n```\r\n\r\n`BasketHeader.tsx`와 `ProductItem.tsx`을 아래와 같이 수정하여, `itemList`의 값을 읽고 변경해봅시다.\r\n\r\n**src/BasketHeader.tsx :**\r\n\r\n```tsx\r\nimport * as React from 'react';\r\nimport { useBasketState } from './BasketHook';\r\n\r\nconst BasketHeader = () => {\r\n  const state = useBasketState();\r\n\r\n  React.useEffect(() => {\r\n    console.log(state.itemList);\r\n  }, [state.itemList]);\r\n\r\n  return (\r\n    <>\r\n      <span>총 {state.itemList.length}개의 상품이 담겼습니다.</span>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default BasketHeader;\r\n```\r\n\r\n**src/ProductItem.tsx :**\r\n\r\n```tsx\r\nimport * as React from 'react';\r\nimport { Action } from './BasketContext';\r\nimport { useBasketDispatch } from './BasketHook';\r\nimport { Item } from './Types';\r\n\r\ntype ProductItemProps = {\r\n  food: Item;\r\n};\r\n\r\nconst ProductItem = ({ food }: ProductItemProps) => {\r\n  const dispatch = useBasketDispatch();\r\n\r\n  return (\r\n    <>\r\n      <p>\r\n        {food.name} - {food.price}원\r\n      </p>\r\n      <button\r\n        onClick={() =>\r\n          dispatch({\r\n            type: Action.SET,\r\n            itemList: [{ name: food.name, price: food.price }],\r\n          })\r\n        }\r\n      >\r\n        장바구니 담기 +\r\n      </button>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ProductItem;\r\n```\r\n\r\n모두 마치셨다면, '장바구니 담기' 버튼을 눌러 확인해봅시다.  \r\n![Example React View](/assets/image/2021-07-23-React-Context-API/2021-07-23-React-Context-API_4.png)\r\n\r\n긴 글을 읽어주셔서 감사합니다.  \r\n시간이 나신다면 `Action`에 'REMOVE'와 같은 여러 Action을 추가하여 여러 기능을 추가하여 더 완성도 있게 만들어봅시다.\r\n"},"__N_SSG":true}