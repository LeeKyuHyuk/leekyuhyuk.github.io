{"pageProps":{"excerpt":" 이번 시간에는 이전 글 에서 만든 게시글 목록을 클릭하면, 글을 조회하는 기능을 추가해보도록 하겠습니다. 게시글 조회 페이지 만들기 src\\main\\resources\\templates\\board 에 detail.html 을 아래와 같이 작성합니다. 수정 삭제 Service 수정하기 게","url":"/article/spring-boot/2020/07/20/Spring-Boot-JPA-MySQL-Board-Post-View","frontmatter":{"title":"[Spring Boot] 게시판 구현 하기 (2) - 글 조회","date":"2020-07-20 11:01:06","category":"Spring-Boot"},"content":"\n이번 시간에는 [이전 글](https://kyuhyuk.kr/article/spring-boot/2020/07/19/Spring-Boot-JPA-MySQL-Board-Write-Post)에서 만든 게시글 목록을 클릭하면, 글을 조회하는 기능을 추가해보도록 하겠습니다.\n\n## 게시글 조회 페이지 만들기\n\n`src\\main\\resources\\templates\\board`에 `detail.html`을 아래와 같이 작성합니다.\n\n```html\n<!DOCTYPE html>\n<html lang=\"ko\" xmlns:th=\"http://www.thymeleaf.org\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title th:text=\"@{'게시판 - ' + ${post.title}}\"></title>\n    <link rel=\"stylesheet\" href=\"/webjars/bootstrap/4.5.0/css/bootstrap.min.css\" />\n  </head>\n  <body>\n    <header th:insert=\"common/header.html\"></header>\n    <div class=\"container\">\n      <div class=\"card\">\n        <div class=\"card-body\">\n          <h5 class=\"card-title\" th:text=\"@{${post.title} + ' - ' + ${post.author}}\"></h5>\n          <p class=\"card-text\">\n            <small\n              class=\"text-muted\"\n              th:text=\"${#temporals.format(post.createdDate, 'yyyy-MM-dd HH:mm')}\"\n            ></small>\n          </p>\n          <p class=\"card-text\" th:text=\"${post.content}\"></p>\n        </div>\n      </div>\n      <div class=\"row mt-3\">\n        <div class=\"col-auto mr-auto\"></div>\n        <div class=\"col-auto\">\n          <a class=\"btn btn-info\" th:href=\"@{'/post/edit/' + ${post.id}}\" role=\"button\">수정</a>\n        </div>\n        <div class=\"col-auto\">\n          <form id=\"delete-form\" th:action=\"@{'/post/' + ${post.id}}\" method=\"post\">\n            <input type=\"hidden\" name=\"_method\" value=\"delete\" />\n            <button id=\"delete-btn\" type=\"submit\" class=\"btn btn-danger\">삭제</button>\n          </form>\n        </div>\n      </div>\n    </div>\n    <script src=\"/webjars/jquery/3.5.1/jquery.min.js\"></script>\n    <script src=\"/webjars/bootstrap/4.5.0/js/bootstrap.min.js\"></script>\n  </body>\n</html>\n```\n\n## Service 수정하기\n\n게시글을 클릭하면 게시물의 내용이 화면에 출력되어야 합니다.  \n그러려면 게시글의 `id`를 받아 해당 게시글의 데이터만 가져와 화면에 뿌려줘야 합니다.  \n`getPost()`를 구현하여 해결해봅시다.\n\n```java\npackage kr.kyuhyuk.board.service;\n\nimport kr.kyuhyuk.board.domain.entity.Board;\nimport kr.kyuhyuk.board.domain.repository.BoardRepository;\nimport kr.kyuhyuk.board.dto.BoardDto;\nimport org.springframework.stereotype.Service;\n\nimport javax.transaction.Transactional;\nimport java.util.ArrayList;\nimport java.util.List;\n\n@Service\npublic class BoardService {\n    private BoardRepository boardRepository;\n\n    public BoardService(BoardRepository boardRepository) {\n        this.boardRepository = boardRepository;\n    }\n\n    @Transactional\n    public Long savePost(BoardDto boardDto) {\n        return boardRepository.save(boardDto.toEntity()).getId();\n    }\n\n    @Transactional\n    public List<BoardDto> getBoardList() {\n        List<Board> boardList = boardRepository.findAll();\n        List<BoardDto> boardDtoList = new ArrayList<>();\n\n        for(Board board : boardList) {\n            BoardDto boardDto = BoardDto.builder()\n                    .id(board.getId())\n                    .author(board.getAuthor())\n                    .title(board.getTitle())\n                    .content(board.getContent())\n                    .createdDate(board.getCreatedDate())\n                    .build();\n            boardDtoList.add(boardDto);\n        }\n        return boardDtoList;\n    }\n\n    @Transactional\n    public BoardDto getPost(Long id) {\n        Board board = boardRepository.findById(id).get();\n\n        BoardDto boardDto = BoardDto.builder()\n                .id(board.getId())\n                .author(board.getAuthor())\n                .title(board.getTitle())\n                .content(board.getContent())\n                .createdDate(board.getCreatedDate())\n                .build();\n        return boardDto;\n    }\n}\n```\n\n## Controller 수정하기\n\n각 게시글을 클릭하면, `/post/{id}`으로 Get 요청을 합니다. (만약 1번 글을 클릭하면 `/post/1`로 접속됩니다.)  \n`BoardController`에 `detail()`을 아래와 같이 구현하여, 요청받았을 때 해당 `id`의 데이터가 View로 전달되도록 만들어줍니다.\n\n```java\npackage kr.kyuhyuk.board.controller;\n\nimport kr.kyuhyuk.board.dto.BoardDto;\nimport kr.kyuhyuk.board.service.BoardService;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.PostMapping;\n\nimport java.util.List;\n\n@Controller\npublic class BoardController {\n    private BoardService boardService;\n\n    public BoardController(BoardService boardService) {\n        this.boardService = boardService;\n    }\n\n    @GetMapping(\"/\")\n    public String list(Model model) {\n        List<BoardDto> boardDtoList = boardService.getBoardList();\n        model.addAttribute(\"postList\", boardDtoList);\n        return \"board/list.html\";\n    }\n\n    @GetMapping(\"/post\")\n    public String post() {\n        return \"board/post.html\";\n    }\n\n    @PostMapping(\"/post\")\n    public String write(BoardDto boardDto) {\n        boardService.savePost(boardDto);\n        return \"redirect:/\";\n    }\n\n    @GetMapping(\"/post/{id}\")\n    public String detail(@PathVariable(\"id\") Long id, Model model) {\n        BoardDto boardDto = boardService.getPost(id);\n        model.addAttribute(\"post\", boardDto);\n        return \"board/detail.html\";\n    }\n}\n```\n\n서버를 실행하고 글을 클릭해 보면 아래와 같이 글 내용이 출력되는 것을 확인할 수 있습니다.  \n![Board Detail](/assets/image/2020-07-20-Spring-Boot-JPA-MySQL-Board-Post-View/2020-07-20-Spring-Boot-JPA-MySQL-Board-Post-View_1.png)\n"},"__N_SSG":true}