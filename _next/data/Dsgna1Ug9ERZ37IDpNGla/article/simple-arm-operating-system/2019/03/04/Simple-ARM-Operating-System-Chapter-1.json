{"pageProps":{"excerpt":" Build Cross Compiler 크로스 컴파일러(Cross Compiler)는 컴파일러가 실행되는 플랫폼이 아닌 다른 플랫폼에서 실행 가능한 코 드를 생성할 수 있는 컴파일러이다. 크로스 컴파일러 툴은 임베디드 시스템 혹은 여러 플랫폼에서 실행파일을 생성하는데 사용된다. 이것은운","url":"/article/simple-arm-operating-system/2019/03/04/Simple-ARM-Operating-System-Chapter-1","frontmatter":{"title":"Chapter 1: Cross Compiler를 빌드하고, 빌드환경을 구축해보자!","date":"2019-03-04 23:07:01","category":"Simple-ARM-Operating-System"},"content":"\n### Build Cross Compiler\n\n> 크로스 컴파일러(Cross Compiler)는 컴파일러가 실행되는 플랫폼이 아닌 다른 플랫폼에서 실행 가능한 코\n> 드를 생성할 수 있는 컴파일러이다.  \n> 크로스 컴파일러 툴은 임베디드 시스템 혹은 여러 플랫폼에서 실행파일을 생성하는데 사용된다. 이것은운\n> 영 체제를 지원하지 않는 마이크로컨트롤러와 같이 컴파일이 실현 불가능한 플랫폼에 컴파일하는데 사용\n> 된다.  \n> 이것은 시스템이 사용하는데 하나 이상의 플랫폼을 쓰는 반가상화에 이 도구를 사용하는 것이 더 일반적\n> 이게 되었다.  \n> [Wikipedia - 크로스 컴파일러](https://ko.wikipedia.org/wiki/크로스%20컴파일러)\n\n![GNU GCC Cross Compiler](/assets/image/2019-03-04-Simple-ARM-Operating-System-Chapter-1/2019-03-04-Simple-ARM-Operating-System-Chapter-1_1.png)  \nPicture Source :\n_[Preshing on Programming - How to Build a GCC Cross-Compiler ](https://preshing.com/20141119/how-to-build-a-gcc-cross-compiler)_\n\n### Step 1. Download Source code\n\n```\n$ wget https://ftp.gnu.org/gnu/binutils/binutils-2.31.1.tar.xz\n$ wget https://ftp.gnu.org/gnu/gcc/gcc-8.2.0/gcc-8.2.0.tar.xz\n$ wget https://ftp.gnu.org/gnu/mpfr/mpfr-4.0.1.tar.xz\n$ wget https://ftp.gnu.org/gnu/gmp/gmp-6.1.2.tar.xz\n$ wget https://ftp.gnu.org/gnu/mpc/mpc-1.1.0.tar.gz\n```\n\n### Step 2. Build GNU Binutils\n\n> GNU 바이너리 유틸리티(GNU Binary Utilities) 또는 GNU Binutils는 여러 종류의 오브젝트 파일 형식들을\n> 조작하기 위한 프로그래밍 도구 모음이다.  \n> [Wikipedia - GNU 바이너리 유틸리티](https://ko.wikipedia.org/wiki/GNU_바이너리_유틸리티)\n\n```\n$ tar xvJf binutils-2.31.1.tar.xz\n$ cd binutils-2.31.1\n$ ./configure \\\n  --prefix=/home/leekyuhyuk/workspace/tools \\\n  --target=arm-none-eabi \\\n  --disable-libssp \\\n  --disable-libstdcxx-pch \\\n  --disable-libunwind-exceptions \\\n  --disable-linker-build-id \\\n  --disable-multilib \\\n  --disable-nls \\\n  --disable-shared \\\n  --disable-threads \\\n  --disable-werror \\\n  --enable-__cxa_atexit \\\n  --enable-checking=release \\\n  --enable-clocale=gnu \\\n  --enable-default-pie \\\n  --enable-default-ssp \\\n  --enable-gnu-indirect-function \\\n  --enable-gnu-unique-object \\\n  --enable-install-libiberty \\\n  --enable-libmpx \\\n  --enable-lto \\\n  --enable-plugin \\\n  --with-gnu-ld \\\n  --with-linker-hash-style=gnu \\\n  --with-system-zlib\n$ make configure-host\n$ make LDFLAGS=\"-all-static\"\n$ make install\n$ cd ..\n```\n\n- `--target`: 컴파일해서 만들어진 바이너리가 만들어내는 바이너리가 실행되는 시스템\n- `--prefix` : PREFIX에 binutils를 설치합니다.\n  - 원하는 경로를 입력하면 됩니다. 저는 `/home/leekyuhyuk/workspace/tools`로 입력하였습니다.\n- `--disable-shared` : Static Library로 빌드합니다.\n- `--disable-nls` : 모든 메세지를 영어로 출력합니다.\n\n### Step 3. Build GNU GCC\n\n```\n$ tar xvJf gcc-8.2.0.tar.xz\n$ cd gcc-8.2.0\n$ tar xvJf ../gmp-6.1.2.tar.xz\n$ mv gmp-6.1.2 gmp\n$ tar xvJf ../mpfr-4.0.1.tar.xz\n$ mv mpfr-4.0.1 mpfr\n$ tar xvzf ../mpc-1.1.0.tar.gz\n$ mv mpc-1.1.0 mpc\n$ ./configure \\\n  --prefix=/home/leekyuhyuk/workspace/tools \\\n  --target=arm-none-eabi \\\n  --disable-libssp \\\n  --disable-libstdcxx-pch \\\n  --disable-libunwind-exceptions \\\n  --disable-linker-build-id \\\n  --disable-multilib \\\n  --disable-shared \\\n  --disable-threads \\\n  --disable-werror \\\n  --enable-__cxa_atexit \\\n  --enable-checking=release \\\n  --enable-clocale=gnu \\\n  --enable-default-pie \\\n  --enable-default-ssp \\\n  --enable-gnu-indirect-function \\\n  --enable-gnu-unique-object \\\n  --enable-install-libiberty \\\n  --enable-languages=c \\\n  --enable-libmpx \\\n  --enable-lto \\\n  --enable-plugin \\\n  --with-cpu=arm1176jzf-s \\\n  --with-float=hard \\\n  --with-gnu-ld \\\n  --with-linker-hash-style=gnu \\\n  --with-newlib \\\n  --with-sysroot=/home/leekyuhyuk/workspace/tools/arm-none-eabi \\\n  --with-system-zlib\n$ make configure-host\n$ make all-gcc all-target-libgcc\n$ make install-gcc install-target-libgcc\n$ cd ..\n```\n\n- `--enable-languages` : Compiler나 Runtime Library들이 어떤걸로 빌드되어야 할지 설정합니다.\n- `--with-system-zlib` : GCC가 내부 복사본이 아닌 Host에 있는 zlib Library로 Link하도록 설정합니다.\n- `--with-cpu` : Compiler가 어떤 CPU를 대상으로 코드를 만들어낼지 설정합니다.\n  - Raspberry Pi Zero는 'arm1176jzf-s'로 설정합니다.\n"},"__N_SSG":true}