{"pageProps":{"excerpt":" ATmega328P의 UART(Universal Asynchronous Receiver and Transmitter) 기능을 사용하면 PC에서 마이크로컨트롤러와 쉽게 통신할 수 있습니다. 이 글에서는 마이크로컨트롤러 프로젝트에서 UART를 활용할 수 있는 몇 가지 기본 기능을 살펴보고","url":"/article/avr/2022/08/28/AVR-ATmega328P-UART","frontmatter":{"title":"[AVR] ATmega328P UART 구현","date":"2022-08-28 10:35:33","category":"AVR"},"content":"\nATmega328P의 UART(Universal Asynchronous Receiver and Transmitter) 기능을 사용하면 PC에서 마이크로컨트롤러와 쉽게 통신할 수 있습니다.\n\n이 글에서는 마이크로컨트롤러 프로젝트에서 UART를 활용할 수 있는 몇 가지 기본 기능을 살펴보고 구현해 보겠습니다.\n\n# 회로 연결\n\n아래와 같이 회로를 구성합니다. Arduino를 연결한 이유는 `avrdude`를 사용하여 ATmega328P의 Flash에 프로그래밍(Flash Write)하기 위해 연결했습니다.\n\n![Connections](/assets/image/2022-08-28-AVR-ATmega328P-UART/AVR-ATmega328P-UART_1.png)\n\n# UART 초기화\n\nUART를 초기화하기 위해 구성해야 하는 몇 가지 항목이 있습니다. 가장 먼저 결정해야 할 것은 전송 속도(Buadrate)입니다. UART의 경우 전송 속도는 전송될 초당 비트 수 입니다. 다음과 같이 여러 표준 속도가 있습니다:\n\n- 1200\n- 2400\n- 4800\n- 9600\n- 19200\n- 38400\n- 57600\n- 115200\n\n속도가 큰 문제가 되지 않는 대부분의 마이크로컨트롤러 프로젝트의 경우에는 `9600`이 주로 사용됩니다. 초당 1200개의 문자를 전송하는 것과 같습니다. (16MHz 클럭의 ATmega328P는 초당 `1Mbps - 125000`개의 문자를 전송할 수도 있습니다)\n\n# 전송 속도 설정하기\n\n전송 속도 설정은 `UBRR0H`와 `UBRR0L` 레지스터에 기록하여 설정합니다. 이 레지스터에 기록되는 값은 아래 수식의 값입니다.\n\n![Buadrate Calc](/assets/image/2022-08-28-AVR-ATmega328P-UART/AVR-ATmega328P-UART_2.png)\n\n위의 수식에서 `fOSC`는 클럭 속도입니다. 프로젝트에서 16MHz의 외부 발진기를 사용하고 원하는 전송 속도가 9600이라고 가정하면 `UBRRn`의 값은 `(16000000/(16*9600)) - 1 = 103.167`이 됩니다. `103.167`은 정수가 아니므로 반올림해서 `103`이 됩니다.\n\n전송 속도 레지스터(`UBRR`)은 각각 8비트이므로 `103`을 하위 바이트와 상위 바이트로 분리해야 합니다. `255`보다 작기 때문에 상위 바이트가 `0`이고 하위 바이트가 `103`인 것은 분명하지만, 상위 바이트와 하위 바이트를 구분해서 코드를 작성하는 방법은 아래와 같습니다:\n\n```c\n    // 하위 바이트를 UBRR0L에 기록\n    UBRR0L = (uint8_t)(103 & 0xFF);\n\n    // 상위 바이트를 UBRR0H에 기록\n    UBRR0H = (uint8_t)(103 >> 8)\n```\n\n# UART 송신기와 수신기 활성화하기\n\n`UCSR` 레지스터를 설정하여 송신 및 수신 기능을 활성화해야 합니다. 이 작업을 하지 않으면 마이크로컨트롤러의 UART RX/TX 핀은 표준 I/O핀으로 작동합니다. `UCSR0B` 레지스터의 `RXEN0`와 `TXEN0`의 비트를 `1`로 설정합니다.\n\n```c\n    // UART 송신기와 수신기 활성화\n    UCSR0B |= (1 << RXEN0) | (1 << TXEN0)\n```\n\n# 프레임 포맷\n\n마지막으로 데이터 비트 수, 정지 비트 수 및 패리티 비트 사용을 포함하는 프레임 포맷을 설정해야 하지만, 기본적으로 시스템은 8개의 데이터 비트에 패리티 비트는 없고 1개의 정지 비트(8N1이라고 불립니다)의 값으로 초기화됩니다. 이 설정은 일반적인 설정이며 대부분 터미널의 기본값이므로 여기서는 변경하지 않습니다.\n\n# 초기화 함수 작성하기\n\n아래와 같이 위의 내용을 바탕으로 UART를 초기화하는 함수를 작성합니다:\n\n```c\nvoid uartInit(uint16_t ubrr)\n{\n    // UBRR에 전송 속도(Buadrate)를 설정\n    UBRR0L = (uint8_t)(ubrr & 0xFF);\n    UBRR0H = (uint8_t)(ubrr >> 8);\n\n    // UART 송신기와 수신기 활성화\n    UCSR0B |= (1 << RXEN0) | (1 << TXEN0);\n}\n```\n\n이 초기화 함수는 UART 관련 함수를 사용하기 전에 꼭 호출해야 합니다. 만약 호출하지 않는다면 UART는 작동하지 않습니다.\n\n# 단일 문자 전송\n\nUART에서 모든 전송 기능은 단일 문자를 UART를 통해 보내는 것으로 시작됩니다.\n\n```c\nvoid uartPut(unsigned char data)\n{\n    // 전송 버퍼가 비어 있을 때까지 기다립니다\n    while(!(UCSR0A & (1 << UDRE0)));\n\n    // 데이터를 UDR(전송 레지스터)에 입력\n    UDR0 = data;\n}\n```\n\n데이터를 전송하려면 전송 버퍼가 비어 있는지 확인해야 합니다. 데이터시트에 따르면 `UDREn`이 `1`이면 버퍼가 비어있는 것을 의미하며 데이터를 전송할 준비가 된 것이라고 설명하고 있습니다. `UDRE0`은 USART 제어 및 상태 레지스터인 `UCSR0A` 있으므로, `UCSR0A`를 `(1 << UDRE0)`으로 마스킹 해서 값을 얻을 수 있습니다.\n\n`UDRE0`가 `1`이 되면 버퍼가 비어있는 것으로 버퍼가 비어있을 때 전송하려는 문자를 `UDR0` 레지스터에 입력만 하면 나머지는 하드웨어가 알아서 처리하게 됩니다.\n\n# 문자열 전송\n\n단일 문자 전송 함수가 있으면 문자열을 보내는 함수를 작성하는 것은 매우 간단합니다.\n\n```c\nvoid uartPuts(char* s)\n{\n    // 문자열의 끝을 알리는 NULL이 나올때까지 단일 문자를 전송합니다\n    while(*s > 0) uartPut(*s++);\n}\n```\n\n위의 함수는 문자열을 입력받아서 `NULL`이 나올 때까지 각 문자를 하나씩 전송합니다.\n\n# 16진수 값 전송\n\n터미널에서 읽을 수 있는 형식으로 16진수의 값을 전송하려면 먼저 ACSII로 변환해야 합니다.\n\n```c\nvoid uartPutHex8(uint8_t val)\n{\n    // 입력 값에서 상위 및 하위 니블 추출\n    uint8_t upperNibble = (val & 0xF0) >> 4;\n    uint8_t lowerNibble = val & 0x0F;\n\n    // 니블을 ASCII 16진수로 변환\n    upperNibble += upperNibble > 9 ? 'A' - 10 : '0';\n    lowerNibble += lowerNibble > 9 ? 'A' - 10 : '0';\n\n    // 문자를 출력\n    uartPut(upperNibble);\n    uartPut(lowerNibble);\n}\n```\n\n`uartPutHex8()`을 사용하면 더 큰 16진수 값을 출력하도록 쉽게 확장할 수 있습니다. 예를 들어 16비트의 값을 16진수의 값으로 전송하는 함수는 다음과 같습니다:\n\n```c\nvoid uartPutHex16(uint16_t val)\n{\n    // 상위 8비트를 전송\n    uartPutHex8((uint8_t)(val >> 8));\n\n    // 하위 8비트를 전송\n    uartPutHex8((uint8_t)(val & 0x00FF));\n}\n```\n\n# 10진수 값 전송\n\n10진수 값을 전송하는 것은 바이트를 상위 및 하위 니블로 분할하고 직접 변환할 수 없기 때문에 위에서 구현한 16진수의 값을 전송하는 것보다 조금 더 까다롭습니다. 특히 ATmega328P에는 하드웨어 분할기가 없기 때문에 나누기에 대한 비용이 많이 듭니다. 대신 나누기 연산을 빼기로 대체하여 속도를 높일 수 있습니다.\n\n```c\nvoid uartPutU8(uint8_t val)\n{\n    uint8_t dig1 = '0', dig2 = '0';\n\n    // 100 단위의 값을 계산합니다\n    while(val >= 100)\n    {\n        val -= 100;\n        dig1++;\n    }\n\n    // 10 단위의 값을 계산합니다\n    while(val >= 10)\n    {\n        val -= 10;\n        dig2++;\n    }\n\n    // 첫 번째 숫자를 출력 (0이면 출력하지 않습니다)\n    if(dig1 != '0') uartPut(dig1);\n\n    // 두 번째 숫자를 출력 (0이면 출력하지 않습니다)\n    if((dig1 != '0') || (dig2 != '0')) uartPut(dig2);\n\n    // 마지막 숫자를 출력\n    uartPut(val + '0');\n}\n```\n\n위의 `uartPutU8()`은 부호가 없는 값을 출력합니다. 만약 부호가 있는 값을 출력해야 하면 어떻게 해야 할까요? 방법은 간단합니다. `MSB`가 1로 설정되어 있나 확인해서 `MSB`가 1이면 음수 기호를 출력하고 `uartPutU8()`을 호출합니다.\n\n```c\nvoid uartPutS8(int8_t val)\n{\n    // 값이 음수인지 확인합니다\n    if(val & 0x80)\n    {\n        // 음수 기호를 출력합니다\n        uartPut('-');\n\n        // 부호 없는 값을 가져옵니다\n        val = ~(val - 1);\n    }\n\n    // 부호 없는 값을 출력합니다\n    uartPutU8((uint8_t)val);\n}\n```\n\n이 개념을 더 큰 자료형으로 확장하는 것은 간단합니다. 예를 들어 16비트의 값은 아래와 같이 확장할 수 있습니다:\n\n```c\nvoid uartPutU16(uint16_t val)\n{\n    uint8_t dig1 = '0', dig2 = '0', dig3 = '0', dig4 = '0';\n\n    // 10000 단위의 값을 계산합니다\n    while(val >= 10000)\n    {\n        val -= 10000;\n        dig1++;\n    }\n\n    // 1000 단위의 값을 계산합니다\n    while(val >= 1000)\n    {\n        val -= 1000;\n        dig2++;\n    }\n\n    // 100 단위의 값을 계산합니다\n    while(val >= 100)\n    {\n        val -= 100;\n        dig3++;\n    }\n\n    // 10 단위의 값을 계산합니다\n    while(val >= 10)\n    {\n        val -= 10;\n        dig4++;\n    }\n\n    // 이전 값이 출력되었는지 저장하는 변수입니다\n    uint8_t prevPrinted = 0;\n\n    // 첫 번째 숫자를 출력 (0이면 출력하지 않습니다)\n    if(dig1 != '0') {uartPut(dig1); prevPrinted = 1;}\n\n    // 두 번째 숫자를 출력 (0이면 출력하지 않습니다)\n    if(prevPrinted || (dig2 != '0')) {uartPut(dig2); prevPrinted = 1;}\n\n    // 세 번째 숫자를 출력 (0이면 출력하지 않습니다)\n    if(prevPrinted || (dig3 != '0')) {uartPut(dig3); prevPrinted = 1;}\n\n    // 네 번째 숫자를 출력 (0이면 출력하지 않습니다)\n    if(prevPrinted || (dig4 != '0')) {uartPut(dig4); prevPrinted = 1;}\n\n    // 마지막 숫자를 출력\n    uartPut(val + '0');\n}\n```\n\n```c\nvoid uartPutS16(int16_t val)\n{\n    // check for negative number\n    if(val & 0x8000)\n    {\n        // print minus sign\n        uartPut('-');\n\n        // convert to unsigned magnitude\n        val = ~(val - 1);\n    }\n\n    // print unsigned magnitude\n    uartPutU16((uint16_t) val);\n}\n```\n\n# UART를 통해 수신하기\n\nUART를 통해 단일 문자를 수신하는 건 위에서 구현한 `uartPut()`와 비슷합니다. 문자를 수신할 때는 `RXC0` 비트가 Set 될 때까지 `UCSR0A` 레지스터를 폴링 하면 됩니다. 그리고 `UDR0`에서 수신한 문자를 반환할 수 있습니다.\n\n```c\nvoid uartGet(void)\n{\n    // 데이터 수신을 기다립니다\n    while(!(UCSR0A & (1 << RXC0)));\n\n    // 데이터를 반환합니다\n    return UDR0;\n}\n```\n\n캐리지 리턴(`\\r`)로 끝나는 데이터의 전체 라인을 수신하기 위해 `uartGetLine()`을 구현해 봅시다.\n\n```c\nvoid uartGetLine(char* buf, uint8_t n)\n{\n    uint8_t bufIdx = 0;\n    char c;\n\n    // 수신된 문자가 캐리지 리턴(\\r)이 나올때까지 수신합니다\n    do\n    {\n        // 단일 문자를 수신합니다\n        c = uartGet();\n\n        // 수신한 단일 문자를 출력합니다\n        uartPut(c);\n\n        // 버퍼에 단일 문자를 저장합니다\n        buf[bufIdx++] = c;\n    }\n    while((bufIdx < n) && (c != '\\r'));\n\n    // 문자열 버퍼의 마지막에 NULL을 입력해서 문자열의 끝을 지정합니다\n    buf[bufIdx] = 0;\n}\n```\n\n앞에서 구현한 함수와 달리 여기서는 실제로 버퍼를 할당하여 문자를 저장하고, 수신 함수에 전달합니다. 예를 들면 아래와 같습니다:\n\n```c\n    // Buffer를 할당합니다.\n    const uint8_t bufSize = 20;\n    char buf[bufSize];\n\n    // UART를 통해 데이터의 전체라인을 수신합니다\n    uartGetLine(buf, bufSize);\n\n    // 수신한 데이터를 출력합니다\n    uartPuts(\"You entered: \");\n    uartPuts(buf);\n    uartPut('\\n');\n```\n\n# ATmega328P에서 실행하기\n\n프로젝트에 아래의 파일을 생성합니다.\n\n**MakeFile :**\n\n```makefile\nCC = avr-gcc\nCFLAGS = -Wall -Os -mmcu=atmega328p\nOBJCOPY = avr-objcopy\n\nOBJ = main.o uart.o\n\nall: atmega328p-uart.hex\n\n%.o: %.c\n\t$(CC) $(CFLAGS) -c $<\n\natmega328p-uart.elf: $(OBJ)\n\t$(CC) $(CFLAGS) -o atmega328p-uart.elf $(OBJ)\n\natmega328p-uart.hex: atmega328p-uart.elf\n\t$(OBJCOPY) atmega328p-uart.elf -O ihex atmega328p-uart.hex\n\nclean:\n\trm -f *.o *.elf *.hex\n```\n\n**uart.h :**\n\n```c\n#include <stdint.h>\n\nvoid uartInit(uint16_t ubrr);\nvoid uartPut(unsigned char data);\nvoid uartPuts(char *s);\nvoid uartPutHex8(uint8_t val);\nvoid uartPutHex16(uint16_t val);\nvoid uartPutU8(uint8_t val);\nvoid uartPutS8(int8_t val);\nvoid uartPutU16(uint16_t val);\nvoid uartPutS16(int16_t val);\nunsigned char uartGet(void);\nvoid uartGetLine(char *buf, uint8_t n);\n```\n\n**uart.c :**\n\n```c\n#include <avr/io.h>\n#include \"uart.h\"\n\nvoid uartInit(uint16_t ubrr)\n{\n    // UBRR에 전송 속도(Buadrate)를 설정\n    UBRR0L = (uint8_t)(ubrr & 0xFF);\n    UBRR0H = (uint8_t)(ubrr >> 8);\n\n    // UART 송신기와 수신기 활성화\n    UCSR0B |= (1 << RXEN0) | (1 << TXEN0);\n    uartPuts(\"\\n\\r\");\n    uartPuts(\"[INFO] UART initialized!\\n\\r\");\n}\n\nvoid uartPut(unsigned char data)\n{\n    // 전송 버퍼가 비어 있을 때까지 기다립니다\n    while (!(UCSR0A & (1 << UDRE0)))\n        ;\n\n    // 데이터를 UDR(전송 레지스터)에 입력\n    UDR0 = data;\n}\n\nvoid uartPuts(char *s)\n{\n    // 문자열의 끝을 알리는 NULL이 나올때까지 단일 문자를 전송합니다\n    while (*s > 0)\n        uartPut(*s++);\n}\n\nvoid uartPutHex8(uint8_t val)\n{\n    // 입력 값에서 상위 및 하위 니블 추출\n    uint8_t upperNibble = (val & 0xF0) >> 4;\n    uint8_t lowerNibble = val & 0x0F;\n\n    // 니블을 ASCII 16진수로 변환\n    upperNibble += upperNibble > 9 ? 'A' - 10 : '0';\n    lowerNibble += lowerNibble > 9 ? 'A' - 10 : '0';\n\n    // 문자를 출력\n    uartPut(upperNibble);\n    uartPut(lowerNibble);\n}\n\nvoid uartPutHex16(uint16_t val)\n{\n    // 상위 8비트를 전송\n    uartPutHex8((uint8_t)(val >> 8));\n\n    // 하위 8비트를 전송\n    uartPutHex8((uint8_t)(val & 0x00FF));\n}\n\nvoid uartPutU8(uint8_t val)\n{\n    uint8_t dig1 = '0', dig2 = '0';\n\n    // 100 단위의 값을 계산합니다\n    while (val >= 100)\n    {\n        val -= 100;\n        dig1++;\n    }\n\n    // 10 단위의 값을 계산합니다\n    while (val >= 10)\n    {\n        val -= 10;\n        dig2++;\n    }\n\n    // 첫 번째 숫자를 출력 (0이면 출력하지 않습니다)\n    if (dig1 != '0')\n        uartPut(dig1);\n\n    // 두 번째 숫자를 출력 (0이면 출력하지 않습니다)\n    if ((dig1 != '0') || (dig2 != '0'))\n        uartPut(dig2);\n\n    // 마지막 숫자를 출력\n    uartPut(val + '0');\n}\n\nvoid uartPutS8(int8_t val)\n{\n    // 값이 음수인지 확인합니다\n    if (val & 0x80)\n    {\n        // 음수 기호를 출력합니다\n        uartPut('-');\n\n        // 부호 없는 값을 가져옵니다\n        val = ~(val - 1);\n    }\n\n    // 부호 없는 값을 출력합니다\n    uartPutU8((uint8_t)val);\n}\n\nvoid uartPutU16(uint16_t val)\n{\n    uint8_t dig1 = '0', dig2 = '0', dig3 = '0', dig4 = '0';\n\n    // 10000 단위의 값을 계산합니다\n    while (val >= 10000)\n    {\n        val -= 10000;\n        dig1++;\n    }\n\n    // 1000 단위의 값을 계산합니다\n    while (val >= 1000)\n    {\n        val -= 1000;\n        dig2++;\n    }\n\n    // 100 단위의 값을 계산합니다\n    while (val >= 100)\n    {\n        val -= 100;\n        dig3++;\n    }\n\n    // 10 단위의 값을 계산합니다\n    while (val >= 10)\n    {\n        val -= 10;\n        dig4++;\n    }\n\n    // 이전 값이 출력되었는지 저장하는 변수입니다\n    uint8_t prevPrinted = 0;\n\n    // 첫 번째 숫자를 출력 (0이면 출력하지 않습니다)\n    if (dig1 != '0')\n    {\n        uartPut(dig1);\n        prevPrinted = 1;\n    }\n\n    // 두 번째 숫자를 출력 (0이면 출력하지 않습니다)\n    if (prevPrinted || (dig2 != '0'))\n    {\n        uartPut(dig2);\n        prevPrinted = 1;\n    }\n\n    // 세 번째 숫자를 출력 (0이면 출력하지 않습니다)\n    if (prevPrinted || (dig3 != '0'))\n    {\n        uartPut(dig3);\n        prevPrinted = 1;\n    }\n\n    // 네 번째 숫자를 출력 (0이면 출력하지 않습니다)\n    if (prevPrinted || (dig4 != '0'))\n    {\n        uartPut(dig4);\n        prevPrinted = 1;\n    }\n\n    // 마지막 숫자를 출력\n    uartPut(val + '0');\n}\n\nvoid uartPutS16(int16_t val)\n{\n    // check for negative number\n    if (val & 0x8000)\n    {\n        // print minus sign\n        uartPut('-');\n\n        // convert to unsigned magnitude\n        val = ~(val - 1);\n    }\n\n    // print unsigned magnitude\n    uartPutU16((uint16_t)val);\n}\n\nunsigned char uartGet(void)\n{\n    // 데이터 수신을 기다립니다\n    while (!(UCSR0A & (1 << RXC0)))\n        ;\n\n    // 데이터를 반환합니다\n    return UDR0;\n}\n\nvoid uartGetLine(char *buf, uint8_t n)\n{\n    uint8_t bufIdx = 0;\n    char c;\n\n    // 수신된 문자가 캐리지 리턴(\\r)이 나올때까지 수신합니다\n    do\n    {\n        // 단일 문자를 수신합니다\n        c = uartGet();\n\n        // 수신한 단일 문자를 출력합니다\n        uartPut(c);\n\n        // 버퍼에 단일 문자를 저장합니다\n        buf[bufIdx++] = c;\n    } while ((bufIdx < n) && (c != '\\r'));\n\n    // 문자열 버퍼의 마지막에 NULL을 입력해서 문자열의 끝을 지정합니다\n    buf[bufIdx] = 0;\n}\n```\n\n**main.c :**\n\n```c\n#include <avr/interrupt.h>\n#include \"uart.h\"\n/*\n  CPU의 Frequency를 16MHz로 설정합니다\n*/\n#define F_CPU 16000000UL\n#include <util/delay.h>\n\nint main(void)\n{\n  // Buffer를 할당합니다.\n  const uint8_t bufSize = 20;\n  char buf[bufSize];\n\n  // UART 전송속도를 설정합니다\n  const unsigned int baudRate = (F_CPU / 16 / 9600) - 1;\n\n  _delay_ms(100); // VCC 안정화를 위해 100ms 동안 대기합니다\n\n  cli(); // 모든 인터럽트를 비활성화 합니다\n\n  // UART를 초기화 합니다\n  uartInit(baudRate);\n\n  // UART를 통해 데이터의 전체라인을 수신합니다\n  uartPuts(\"Please enter any text : \");\n  uartGetLine(buf, bufSize);\n\n  // 수신한 데이터를 출력합니다\n  uartPuts(\"\\n\\r\");\n  uartPuts(\"You entered : \");\n  uartPuts(buf);\n  uartPuts(\"\\n\\r\");\n\n  return 0;\n}\n```\n\n이제 빌드하고 ATmega328P의 Flash Write 해봅시다.\n\n브레드보드에 연결된 Arduino에 ArduinoISP 예제를 넣습니다.  \n![ArduinoISP](/assets/image/2022-08-28-AVR-ATmega328P-UART/AVR-ATmega328P-UART_3.png)\n\n그리고 아래의 명령어를 실행하여 ATmega328P UART 프로젝트를 빌드하고 ATmega328P에 기록합니다.\n\n> `/dev/tty.usbmodem2112201` 부분은 Arduino Board를 입력합니다. ArduinoISP가 프로그래밍되어 있는 Arduino Board는 데이터를 받아 브레드보드에 있는 ATmega328P에 기록합니다\n\n```sh\nmake\navrdude -c stk500v1 -b 19200 -F -p m328p -P /dev/tty.usbmodem2112201 -Uflash:w:atmega328p-uart.hex:i\n```\n\n![Build and Flash](/assets/image/2022-08-28-AVR-ATmega328P-UART/AVR-ATmega328P-UART_4.png)\n\n`minicom`로 ATmega328P에 연결된 UART에 접속해서 정상적으로 동작하는지 확인해 봅니다.  \n입력한 값이 그대로 출력된다면 정상 작동하는 것입니다.  \n![minicom](/assets/image/2022-08-28-AVR-ATmega328P-UART/AVR-ATmega328P-UART_5.png)\n"},"__N_SSG":true}