{"pageProps":{"excerpt":" M1이 탑재된 macOS(Ventura 13.4.1)에서 GDB을 사용할 수 없어서 어떻게 하면 사용할 수 있을지 고민하다가 Docker에서 code-server 를 사용하여 GDB를 사용하는 방법을 공유합니다. Install Docker Desktop on Mac 에 접속하여 Doc","url":"/article/macos/2023/07/08/Debugging-using-GDB-on-Apple-M1-Mac","frontmatter":{"title":"Apple M1 Mac에서 GDB를 사용하여 디버깅을 해보자","date":"2023-07-08 02:10:31","category":"macOS"},"content":"\nM1이 탑재된 macOS(Ventura 13.4.1)에서 GDB을 사용할 수 없어서 어떻게 하면 사용할 수 있을지 고민하다가 Docker에서 [code-server](https://github.com/coder/code-server)를 사용하여 GDB를 사용하는 방법을 공유합니다.\n\n[Install Docker Desktop on Mac](https://docs.docker.com/desktop/install/mac-install)에 접속하여 Docker를 다운로드하여 설치합니다.\n\n아래와 같이 `Dockerfile`과 `build.sh`를 생성하고 아래와 같이 작성합니다.  \n![Dockerfile](/assets/image/2023-07-08-Debugging-using-GDB-on-Apple-M1-Mac/2023-07-08-Debugging-using-GDB-on-Apple-M1-Mac_1.png)  \n**`Dockerfile` :**  \n`root`와 사용자(`code`)의 비밀번호는 `code`로 설정했습니다.  \n```dockerfile\nFROM fedora:38\n\nENV TZ=Asia/Seoul\n\nUSER root\nRUN dnf upgrade -y --refresh\nRUN dnf install -y bash cmake curl dnf-utils g++ gcc gdb git glibc-static gnupg2 libstdc++-static passwd wget\nRUN curl -fsSL https://code-server.dev/install.sh | sh\nRUN dnf clean all\nRUN rm -rf /var/cache/yum\nRUN echo code | passwd root --stdin\nRUN useradd code -G wheel && echo code | passwd code --stdin\nRUN echo \"code\tALL=(ALL:ALL)\tALL\" >> /etc/sudoers\nUSER code\nRUN mkdir -p /home/code/.config/code-server\nRUN echo \"bind-addr: 0.0.0.0:8080\" > /home/code/.config/code-server/config.yaml\nRUN echo \"auth: password\" >> /home/code/.config/code-server/config.yaml\nRUN echo \"password: code\" >> /home/code/.config/code-server/config.yaml\nRUN echo \"cert: false\" >> /home/code/.config/code-server/config.yaml\nRUN echo \"#!/bin/sh\" > /home/code/.config/code-server/run.sh\nRUN echo \"/usr/bin/code-server &\" >> /home/code/.config/code-server/run.sh\nRUN echo \"while true ; do\" >> /home/code/.config/code-server/run.sh\nRUN echo \"  sleep 3600;\" >> /home/code/.config/code-server/run.sh\nRUN echo \"done\" >> /home/code/.config/code-server/run.sh\n\nEXPOSE 8080\nCMD [\"/bin/sh\", \"/home/code/.config/code-server/run.sh\"]\n```\n\n**`build.sh` :**  \n```sh\n#!/bin/sh\n/Applications/Docker.app/Contents/Resources/bin/docker build -t code-server:1.0.0 .\n/Applications/Docker.app/Contents/Resources/bin/docker run --name code-server --cap-add=SYS_PTRACE --security-opt=\"seccomp=unconfined\" --tmpfs /tmp -d -dit -p 8080:8080 -i -t --restart always code-server:1.0.0\n```\n\n모두 작성하고 `build.sh`를 실행하면 됩니다.\n\n그리고 아래의 링크를 클릭하여 C/C++ VSCode Extension의 VSIX 파일을 다운로드 합니다.\n- [C/C++](https://marketplace.visualstudio.com/items?itemName=ms-vscode.cpptools)\n- [C/C++ Themes](https://marketplace.visualstudio.com/items?itemName=ms-vscode.cpptools-themes)\n- [CMake](https://marketplace.visualstudio.com/items?itemName=twxs.cmake)\n- [CMake Tools](https://marketplace.visualstudio.com/items?itemName=ms-vscode.cmake-tools)\n\n'Download Extension'을 클릭했을 때 아래와 같이 출력된다면, Linux ARM64로 다운로드하면 됩니다.\n![C/C++ VSCode Extension Download](/assets/image/2023-07-08-Debugging-using-GDB-on-Apple-M1-Mac/2023-07-08-Debugging-using-GDB-on-Apple-M1-Mac_2.png)\n\n[http://localhost:8080](http://localhost:8080)에 접속하여 VSIX 파일을 설치합니다. **(code-server의 암호는 `code` 입니다)**\n![C/C++ VSCode Extension Install](/assets/image/2023-07-08-Debugging-using-GDB-on-Apple-M1-Mac/2023-07-08-Debugging-using-GDB-on-Apple-M1-Mac_3.png)\n\n프로젝트를 열고 Breakpoint를 설정한 뒤, Debug 버튼을 클릭해 보면 아래와 같이 GDB가 정상적으로 작동되는 것을 확인할 수 있습니다.\n![GDB Debugging](/assets/image/2023-07-08-Debugging-using-GDB-on-Apple-M1-Mac/2023-07-08-Debugging-using-GDB-on-Apple-M1-Mac_4.png)"},"__N_SSG":true}