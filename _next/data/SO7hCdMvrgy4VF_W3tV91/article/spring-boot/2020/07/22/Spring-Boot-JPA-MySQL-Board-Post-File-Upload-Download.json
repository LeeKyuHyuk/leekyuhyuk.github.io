{"pageProps":{"excerpt":" 앞의 글 에 서 글을 수정하고 삭제하는 기능을 만들었습니다. 이번 시간에는 파일을 업로드하고 다운로드하는 기능을 구현해보겠습니다. 파일 업로드 구현하기 파일 업로드를 구현하기 전에, 어떤 과정으로 동작하고 어떻게 구현할 것인지 미리 생각해봅시다. 아래는 파일 업로드의 과정입니다. 우리","url":"/article/spring-boot/2020/07/22/Spring-Boot-JPA-MySQL-Board-Post-File-Upload-Download","frontmatter":{"title":"[Spring Boot] 게시판 구현 하기 (4) - 파일 업로드 & 다운로드","date":"2020-07-22 23:48:39","category":"Spring-Boot"},"content":"\n[앞의 글](https://kyuhyuk.kr/article/spring-boot/2020/07/21/Spring-Boot-JPA-MySQL-Board-Post-Update-Delete)에\n서 글을 수정하고 삭제하는 기능을 만들었습니다.  \n이번 시간에는 파일을 업로드하고 다운로드하는 기능을 구현해보겠습니다.\n\n## 파일 업로드 구현하기\n\n파일 업로드를 구현하기 전에, 어떤 과정으로 동작하고 어떻게 구현할 것인지 미리 생각해봅시다.  \n아래는 파일 업로드의 과정입니다.  \n![File Upload Flow](/assets/image/2020-07-22-Spring-Boot-JPA-MySQL-Board-Post-File-Upload-Download/2020-07-22-Spring-Boot-JPA-MySQL-Board-Post-File-Upload-Download_1.png)  \n우리가 구현할 것은 4가지입니다.\n\n- '글쓰기' 화면에 파일 업로드 추가하기\n- 업로드한 파일의 정보가 기록될 `file` 테이블 만들기 (Entity, Repository, DTO, Service 만들기)\n- 업로드한 파일 정보의 고유 ID가 `board` 테이블에 기록되도록 변경하기\n- `BoardController`의 `write()`에서 업로드한 파일이 서버에 저장되게 하고 `board`, `file` 테이블에 업\n  데이트 되도록 하기\n\n구현할 목록을 보면서 하나하나 진행해봅시다.\n\n우선, `src\\main\\resources\\templates\\board`에 있는 `post.html`을 아래와 같이 수정합니다.  \n기존 내용에 파일 선택하는 거와 `form`에 `enctype=\"multipart/form-data\"`만 추가하였습니다.\n\n```html\n<!DOCTYPE html>\n<html lang=\"ko\" xmlns:th=\"http://www.thymeleaf.org\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>게시판 - 글쓰기</title>\n    <link rel=\"stylesheet\" href=\"/webjars/bootstrap/4.5.0/css/bootstrap.min.css\" />\n  </head>\n  <body>\n    <header th:insert=\"common/header.html\"></header>\n    <div class=\"container\">\n      <form action=\"/post\" method=\"post\" enctype=\"multipart/form-data\">\n        <div class=\"form-group row\">\n          <label for=\"inputTitle\" class=\"col-sm-2 col-form-label\"><strong>제목</strong></label>\n          <div class=\"col-sm-10\">\n            <input type=\"text\" name=\"title\" class=\"form-control\" id=\"inputTitle\" />\n          </div>\n        </div>\n        <div class=\"form-group row\">\n          <label for=\"inputAuthor\" class=\"col-sm-2 col-form-label\"><strong>작성자</strong></label>\n          <div class=\"col-sm-10\">\n            <input type=\"text\" name=\"author\" class=\"form-control\" id=\"inputAuthor\" />\n          </div>\n        </div>\n        <div class=\"form-group row\">\n          <label for=\"inputContent\" class=\"col-sm-2 col-form-label\"><strong>내용</strong></label>\n          <div class=\"col-sm-10\">\n            <textarea type=\"text\" name=\"content\" class=\"form-control\" id=\"inputContent\"></textarea>\n          </div>\n        </div>\n        <div class=\"form-group row\">\n          <label for=\"inputFile\" class=\"col-sm-2 col-form-label\"><strong>첨부 파일</strong></label>\n          <div class=\"col-sm-10\">\n            <div class=\"custom-file\" id=\"inputFile\">\n              <input name=\"file\" type=\"file\" class=\"custom-file-input\" id=\"customFile\" />\n              <label class=\"custom-file-label\" for=\"customFile\">파일을 선택해 주세요.</label>\n            </div>\n          </div>\n        </div>\n        <div class=\"row\">\n          <div class=\"col-auto mr-auto\"></div>\n          <div class=\"col-auto\">\n            <input class=\"btn btn-primary\" type=\"submit\" role=\"button\" value=\"글쓰기\" />\n          </div>\n        </div>\n      </form>\n    </div>\n    <script src=\"/webjars/jquery/3.5.1/jquery.min.js\"></script>\n    <script src=\"/webjars/bootstrap/4.5.0/js/bootstrap.min.js\"></script>\n    <script>\n      $('.custom-file-input').on('change', function () {\n        var fileName = $(this).val().split('\\\\').pop();\n        $(this).siblings('.custom-file-label').addClass('selected').html(fileName);\n      });\n    </script>\n  </body>\n</html>\n```\n\n파일이 업로드되면 '업로드된 실제 파일명', '서버에 저장된 파일명', '파일이 서버에 저장된 위치'가 데이\n터 베이스에 기록되게 프로그램을 작성할 것입니다.  \n우선 업로드된 파일에 대한 데이터가 저장되게 Entity, Repository, DTO, Service를 만들어줍니다.\n\n아래는 `domain.entity` 패키지의 `File` 클래스의 내용입니다.\n\n```java\npackage kr.kyuhyuk.board.domain.entity;\n\nimport lombok.AccessLevel;\nimport lombok.Builder;\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\n\nimport javax.persistence.Column;\nimport javax.persistence.Entity;\nimport javax.persistence.GeneratedValue;\nimport javax.persistence.Id;\n\n@Getter\n@Entity\n@NoArgsConstructor(access = AccessLevel.PROTECTED)\npublic class File {\n\n    @Id\n    @GeneratedValue\n    private Long id;\n\n    @Column(nullable = false)\n    private String origFilename;\n\n    @Column(nullable = false)\n    private String filename;\n\n    @Column(nullable = false)\n    private String filePath;\n\n    @Builder\n    public File(Long id, String origFilename, String filename, String filePath) {\n        this.id = id;\n        this.origFilename = origFilename;\n        this.filename = filename;\n        this.filePath = filePath;\n    }\n}\n```\n\n아래는 `domain.repository` 패키지의 `FileRepository` 인터페이스의 내용입니다.\n\n```java\npackage kr.kyuhyuk.board.domain.repository;\n\nimport kr.kyuhyuk.board.domain.entity.File;\nimport org.springframework.data.jpa.repository.JpaRepository;\n\npublic interface FileRepository extends JpaRepository<File, Long> {\n}\n```\n\n아래는 `dto` 패키지의 `FileDto` 클래스의 내용입니다.\n\n```java\npackage kr.kyuhyuk.board.dto;\n\nimport kr.kyuhyuk.board.domain.entity.File;\nimport lombok.*;\n\n@Getter\n@Setter\n@ToString\n@NoArgsConstructor\npublic class FileDto {\n    private Long id;\n    private String origFilename;\n    private String filename;\n    private String filePath;\n\n    public File toEntity() {\n        File build = File.builder()\n                .id(id)\n                .origFilename(origFilename)\n                .filename(filename)\n                .filePath(filePath)\n                .build();\n        return build;\n    }\n\n    @Builder\n    public FileDto(Long id, String origFilename, String filename, String filePath) {\n        this.id = id;\n        this.origFilename = origFilename;\n        this.filename = filename;\n        this.filePath = filePath;\n    }\n}\n```\n\n아래는 `service` 패키지의 `FileService` 클래스의 내용입니다.  \n`saveFile()`은 업로드한 파일에 대한 정보를 기록하고, `getFile()`는 `id` 값을 사용하여 파일에 대한 정\n보를 가져옵니다.\n\n```java\npackage kr.kyuhyuk.board.service;\n\nimport kr.kyuhyuk.board.domain.entity.File;\nimport kr.kyuhyuk.board.domain.repository.FileRepository;\nimport kr.kyuhyuk.board.dto.FileDto;\nimport org.springframework.stereotype.Service;\n\nimport javax.transaction.Transactional;\n\n@Service\npublic class FileService {\n    private FileRepository fileRepository;\n\n    public FileService(FileRepository fileRepository) {\n        this.fileRepository = fileRepository;\n    }\n\n    @Transactional\n    public Long saveFile(FileDto fileDto) {\n        return fileRepository.save(fileDto.toEntity()).getId();\n    }\n\n    @Transactional\n    public FileDto getFile(Long id) {\n        File file = fileRepository.findById(id).get();\n\n        FileDto fileDto = FileDto.builder()\n                .id(id)\n                .origFilename(file.getOrigFilename())\n                .filename(file.getFilename())\n                .filePath(file.getFilePath())\n                .build();\n        return fileDto;\n    }\n}\n```\n\n`domain.entity` 패키지에 있는 `Board`에 `fileId`를 추가합니다.  \n첨부파일은 게시물에 필수로 들어가는 내용이 아니기 때문에, `nullable = false`는 넣지 않았습니다.\n\n```java\npackage kr.kyuhyuk.board.domain.entity;\n\nimport lombok.AccessLevel;\nimport lombok.Builder;\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\nimport org.springframework.data.annotation.CreatedDate;\nimport org.springframework.data.annotation.LastModifiedDate;\nimport org.springframework.data.jpa.domain.support.AuditingEntityListener;\n\nimport javax.persistence.*;\nimport java.time.LocalDateTime;\n\n@Getter\n@Entity\n@NoArgsConstructor(access = AccessLevel.PROTECTED)\n@EntityListeners(AuditingEntityListener.class) /* JPA에게 해당 Entity는 Auditiong 기능을 사용함을 알립니다. */\npublic class Board {\n\n    @Id\n    @GeneratedValue\n    private Long id;\n\n    @Column(length = 10, nullable = false)\n    private String author;\n\n    @Column(length = 100, nullable = false)\n    private String title;\n\n    @Column(columnDefinition = \"TEXT\", nullable = false)\n    private String content;\n\n    @Column\n    private Long fileId;\n\n    @CreatedDate\n    @Column(updatable = false)\n    private LocalDateTime createdDate;\n\n    @LastModifiedDate\n    private LocalDateTime modifiedDate;\n\n    @Builder\n    public Board(Long id, String author, String title, String content, Long fileId) {\n        this.id = id;\n        this.author = author;\n        this.title = title;\n        this.content = content;\n        this.fileId = fileId;\n    }\n}\n```\n\n`dto` 패키지에 있는 `BoardDto` 클래스에도 `fileId`를 추가합니다.\n\n```java\npackage kr.kyuhyuk.board.dto;\n\nimport kr.kyuhyuk.board.domain.entity.Board;\nimport lombok.*;\n\nimport java.time.LocalDateTime;\n\n@Getter\n@Setter\n@ToString\n@NoArgsConstructor\npublic class BoardDto {\n    private Long id;\n    private String author;\n    private String title;\n    private String content;\n    private Long fileId;\n    private LocalDateTime createdDate;\n    private LocalDateTime modifiedDate;\n\n    public Board toEntity() {\n        Board build = Board.builder()\n                .id(id)\n                .author(author)\n                .title(title)\n                .content(content)\n                .fileId(fileId)\n                .build();\n        return build;\n    }\n\n    @Builder\n    public BoardDto(Long id, String author, String title, String content, Long fileId, LocalDateTime createdDate, LocalDateTime modifiedDate) {\n        this.id = id;\n        this.author = author;\n        this.title = title;\n        this.content = content;\n        this.fileId = fileId;\n        this.createdDate = createdDate;\n        this.modifiedDate = modifiedDate;\n    }\n}\n```\n\n`service` 패키지에 있는 `BoardService` 클래스의 `getPost()`에도 `fileId`를 가져오게 수정합니다.\n\n```java\n@Transactional\npublic BoardDto getPost(Long id) {\n    Board board = boardRepository.findById(id).get();\n\n    BoardDto boardDto = BoardDto.builder()\n            .id(board.getId())\n            .author(board.getAuthor())\n            .title(board.getTitle())\n            .content(board.getContent())\n            .fileId(board.getFileId())\n            .createdDate(board.getCreatedDate())\n            .build();\n    return boardDto;\n}\n```\n\n파일이 업로드되면, MD5 체크섬의 값으로 서버에 저장되게 구현할 것입니다.  \n문자열을 MD5 체크섬으로 변환하는 기능을 구현하기 위해, `util` 패키지를 만들고 `MD5Generator` 클래스\n를 아래와 같이 작성합니다.\n\n```java\npackage kr.kyuhyuk.board.util;\n\nimport java.io.UnsupportedEncodingException;\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\n\npublic class MD5Generator {\n    private String result;\n\n    public MD5Generator(String input) throws UnsupportedEncodingException, NoSuchAlgorithmException {\n        MessageDigest mdMD5 = MessageDigest.getInstance(\"MD5\");\n        mdMD5.update(input.getBytes(\"UTF-8\"));\n        byte[] md5Hash = mdMD5.digest();\n        StringBuilder hexMD5hash = new StringBuilder();\n        for(byte b : md5Hash) {\n            String hexString = String.format(\"%02x\", b);\n            hexMD5hash.append(hexString);\n        }\n        result = hexMD5hash.toString();\n    }\n\n    public String toString() {\n        return result;\n    }\n}\n```\n\n이제 모든 것이 다 준비되었습니다. `controller` 패키지의 `BoardController` 클래스에 있는 `write()`를\n아래와 같이 수정하여, 업로드한 파일을 서버에 저장하고 데이터베이스에 업데이트하게 구현해보겠습니다.\n\n```java\npublic class BoardController {\n    private BoardService boardService;\n    private FileService fileService;\n\n    public BoardController(BoardService boardService, FileService fileService) {\n        this.boardService = boardService;\n        this.fileService = fileService;\n    }\n\n    /* ... 소스코드 생략 ... */\n\n    @PostMapping(\"/post\")\n    public String write(@RequestParam(\"file\") MultipartFile files, BoardDto boardDto) {\n        try {\n            String origFilename = files.getOriginalFilename();\n            String filename = new MD5Generator(origFilename).toString();\n            /* 실행되는 위치의 'files' 폴더에 파일이 저장됩니다. */\n            String savePath = System.getProperty(\"user.dir\") + \"\\\\files\";\n            /* 파일이 저장되는 폴더가 없으면 폴더를 생성합니다. */\n            if (!new File(savePath).exists()) {\n                try{\n                    new File(savePath).mkdir();\n                }\n                catch(Exception e){\n                    e.getStackTrace();\n                }\n            }\n            String filePath = savePath + \"\\\\\" + filename;\n            files.transferTo(new File(filePath));\n\n            FileDto fileDto = new FileDto();\n            fileDto.setOrigFilename(origFilename);\n            fileDto.setFilename(filename);\n            fileDto.setFilePath(filePath);\n\n            Long fileId = fileService.saveFile(fileDto);\n            boardDto.setFileId(fileId);\n            boardService.savePost(boardDto);\n        } catch(Exception e) {\n            e.printStackTrace();\n        }\n        return \"redirect:/\";\n    }\n}\n```\n\n서버를 실행하고, 파일을 업로드해봅시다.  \n![File Upload](/assets/image/2020-07-22-Spring-Boot-JPA-MySQL-Board-Post-File-Upload-Download/2020-07-22-Spring-Boot-JPA-MySQL-Board-Post-File-Upload-Download_2.png)\n\nMySQL에서 `file` 테이블을 조회해보면, 아래와 같이 업로드한 파일 정보가 기록된 것을 볼 수 있습니다.  \n![MySQL file Table](/assets/image/2020-07-22-Spring-Boot-JPA-MySQL-Board-Post-File-Upload-Download/2020-07-22-Spring-Boot-JPA-MySQL-Board-Post-File-Upload-Download_3.png)\n\n위의 `file_path`로 가서 열어보면 업로드한 파일이 제대로 서버에 기록되었음을 확인할 수 있습니다.  \n![File Check](/assets/image/2020-07-22-Spring-Boot-JPA-MySQL-Board-Post-File-Upload-Download/2020-07-22-Spring-Boot-JPA-MySQL-Board-Post-File-Upload-Download_4.png)\n\n## 파일 다운로드 구현하기\n\n글을 열람할 때, 첨부파일이 있으면 첨부파일이 표시되도록 수정합니다.  \n`src\\main\\resources\\templates\\board`에 있는 `detail.html`을 아래와 같이 수정합니다.\n\n```html\n<!DOCTYPE html>\n<html lang=\"ko\" xmlns:th=\"http://www.thymeleaf.org\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title th:text=\"@{'게시판 - ' + ${post.title}}\"></title>\n    <link rel=\"stylesheet\" href=\"/webjars/bootstrap/4.5.0/css/bootstrap.min.css\" />\n  </head>\n  <body>\n    <header th:insert=\"common/header.html\"></header>\n    <div class=\"container\">\n      <div class=\"card\">\n        <div class=\"card-body\">\n          <h5 class=\"card-title\" th:text=\"@{${post.title} + ' - ' + ${post.author}}\"></h5>\n          <p class=\"card-text\">\n            <small\n              class=\"text-muted\"\n              th:text=\"${#temporals.format(post.createdDate, 'yyyy-MM-dd HH:mm')}\"\n            ></small>\n          </p>\n          <p class=\"card-text\" th:text=\"${post.content}\"></p>\n          <div th:if=\"${post.fileId != null}\">\n            <strong>첨부파일 : </strong>\n            <a\n              class=\"card-text\"\n              th:href=\"@{'/download/' + ${post.fileId}}\"\n              th:text=\"${filename}\"\n            ></a>\n          </div>\n        </div>\n      </div>\n      <div class=\"row mt-3\">\n        <div class=\"col-auto mr-auto\"></div>\n        <div class=\"col-auto\">\n          <a class=\"btn btn-info\" th:href=\"@{'/post/edit/' + ${post.id}}\" role=\"button\">수정</a>\n        </div>\n        <div class=\"col-auto\">\n          <form id=\"delete-form\" th:action=\"@{'/post/' + ${post.id}}\" method=\"post\">\n            <input type=\"hidden\" name=\"_method\" value=\"delete\" />\n            <button id=\"delete-btn\" type=\"submit\" class=\"btn btn-danger\">삭제</button>\n          </form>\n        </div>\n      </div>\n    </div>\n    <script src=\"/webjars/jquery/3.5.1/jquery.min.js\"></script>\n    <script src=\"/webjars/bootstrap/4.5.0/js/bootstrap.min.js\"></script>\n  </body>\n</html>\n```\n\n서버를 실행하면, 아래와 같이 첨부파일이 표시되고 URL은 `/download/{fileId}`로 설정됩니다.  \n![Post Attachments](/assets/image/2020-07-22-Spring-Boot-JPA-MySQL-Board-Post-File-Upload-Download/2020-07-22-Spring-Boot-JPA-MySQL-Board-Post-File-Upload-Download_5.png)\n\n이제 `/download/{fileId}`에 대해 구현하기 위해 `controller` 패키지에 있는 `BoardController` 클래스에\n아래 내용을 추가합니다.\n\n```java\n@GetMapping(\"/download/{fileId}\")\npublic ResponseEntity<Resource> fileDownload(@PathVariable(\"fileId\") Long fileId) throws IOException {\n    FileDto fileDto = fileService.getFile(fileId);\n    Path path = Paths.get(fileDto.getFilePath());\n    Resource resource = new InputStreamResource(Files.newInputStream(path));\n    return ResponseEntity.ok()\n            .contentType(MediaType.parseMediaType(\"application/octet-stream\"))\n            .header(HttpHeaders.CONTENT_DISPOSITION, \"attachment; filename=\\\"\" + fileDto.getOrigFilename() + \"\\\"\")\n            .body(resource);\n}\n```\n\n서버를 다시 실행하고, 첨부파일을 클릭해봅시다.  \n정상적으로 다운로드 되는 것을 확인할 수 있습니다.  \n![Post Attachments Download](/assets/image/2020-07-22-Spring-Boot-JPA-MySQL-Board-Post-File-Upload-Download/2020-07-22-Spring-Boot-JPA-MySQL-Board-Post-File-Upload-Download_6.png)\n\n## 업로드 파일 용량 설정하기\n\nSpring Boot에서 업로드 파일 용량의 기본값은 1MB입니다.  \n업로드 파일 용량을 늘리고 싶다면, `spring.servlet.multipart.maxFileSize`와\n`spring.servlet.multipart.maxRequestSize`를 `application.properties`에 설정해 주면 됩니다.\n\n예를 들면, 아래와 같이 설정할 수 있습니다.\n\n```\nspring.servlet.multipart.maxFileSize=100MB\nspring.servlet.multipart.maxRequestSize=100MB\n```\n"},"__N_SSG":true}