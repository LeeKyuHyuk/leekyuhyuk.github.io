{"pageProps":{"excerpt":" 이전 글 에서 구축했던 GraphQL 서버와 React & Electron Project와 연동하는 방법을 정리해 보았습니다. React & Electron 프로젝트 생성 Electron-Typescript-React-Webpack-Boilerplate 을 사용하여 React & El","url":"/article/graphql/2021/09/16/Using-GraphQL-in-React-and-Electron","frontmatter":{"title":"React & Electron에서 GraphQL 사용하기","date":"2021-09-17 03:27:23","category":"GraphQL"},"content":"\r\n[이전 글](https://kyuhyuk.kr/article/graphql/2021/09/16/Building-a-GraphQL-Server-with-NestJS)에서\r\n구축했던 GraphQL 서버와 React & Electron Project와 연동하는 방법을 정리해 보았습니다.\r\n\r\n# React & Electron 프로젝트 생성\r\n\r\n[Electron-Typescript-React-Webpack-Boilerplate](https://github.com/LeeKyuHyuk/Electron-Typescript-React-Webpack-Boilerplate)을\r\n사용하여 React & Electron 프로젝트를 생성합니다.  \r\n설정 방법은\r\n[`README.md`](https://github.com/LeeKyuHyuk/Electron-Typescript-React-Webpack-Boilerplate/blob/master/README.md)\r\n파일을 참고합니다.\r\n\r\n# React & Electron 프로젝트에 Apollo GraphQL Client 추가 및 설정\r\n\r\n아래의 패키지를 설치합니다.\r\n\r\n```bash\r\nnpm install @apollo/client apollo graphql\r\n```\r\n\r\n`package.json`의 `scripts`에 아래를 추가합니다.\r\n\r\n```json\r\n\"apollo:codegen\": \"apollo client:codegen src/types --target=typescript --outputFlat\",\r\n```\r\n\r\n`apollo.config.js`를 프로젝트 최상위 폴더에 생성합니다.\r\n\r\n**`apollo.config.js` :**\r\n\r\n```javascript\r\nmodule.exports = {\r\n  client: {\r\n    service: {\r\n      name: 'My GraphQL Server',\r\n      url: 'http://localhost:8080/graphql',\r\n      // Optional disable SSL validation check\r\n      skipSSLValidation: true,\r\n    },\r\n    includes: ['./src/**/*.tsx', './src/**/*.ts'],\r\n    tagName: 'gql',\r\n  },\r\n};\r\n```\r\n\r\n# GraphQL에서 데이터 가져오기\r\n\r\n`src/renderer/renderer.tsx`를 아래와 같이 작성합니다.\r\n\r\n**`src/renderer/renderer.tsx` :**\r\n\r\n```tsx\r\nimport { ApolloClient, ApolloProvider, gql, InMemoryCache, useQuery } from '@apollo/client';\r\nimport * as React from 'react';\r\nimport * as ReactDOM from 'react-dom';\r\n\r\nconst client = new ApolloClient({\r\n  uri: 'http://localhost:8080/graphql',\r\n  cache: new InMemoryCache(),\r\n});\r\n\r\nconst GET_ALL_PERSON = gql`\r\n  query GetAllPerson {\r\n    getAllPerson {\r\n      id\r\n      name\r\n      number\r\n      email\r\n    }\r\n  }\r\n`;\r\n\r\nReactDOM.render(\r\n  <ApolloProvider client={client}>\r\n    <div className=\"app\"></div>\r\n  </ApolloProvider>,\r\n  document.getElementById('root')\r\n);\r\n```\r\n\r\n프로젝트에서 사용되는 Query, Mutation의 Type를 생성합니다.  \r\n`npm run apollo:codegen`를 실행하면, `src` 폴더 안에 `gql`로 명시한 구문에서 사용한 Type를\r\n`src/types`에 생성합니다.  \r\n![npm run apollo:codegen](/assets/image/2021-09-18-Using-GraphQL-in-React-and-Electron/2021-09-18-Using-GraphQL-in-React-and-Electron_1.png)\r\n\r\n**`src/renderer/renderer.tsx` :**\r\n\r\n```tsx\r\nimport { ApolloClient, ApolloProvider, gql, InMemoryCache, useQuery } from '@apollo/client';\r\nimport * as React from 'react';\r\nimport * as ReactDOM from 'react-dom';\r\nimport { GetAllPerson, GetAllPerson_getAllPerson } from '_/types/GetAllPerson';\r\n\r\nconst client = new ApolloClient({\r\n  uri: 'http://localhost:8080/graphql',\r\n  cache: new InMemoryCache(),\r\n});\r\n\r\nconst GET_ALL_PERSON = gql`\r\n  query GetAllPerson {\r\n    getAllPerson {\r\n      id\r\n      name\r\n      number\r\n      email\r\n    }\r\n  }\r\n`;\r\n\r\nfunction AllPersonTable() {\r\n  const { loading, error, data } = useQuery<GetAllPerson>(GET_ALL_PERSON);\r\n\r\n  if (loading) return <p>Loading...</p>;\r\n  if (error) return <p>{error.message}</p>;\r\n\r\n  return (\r\n    <table>\r\n      <thead>\r\n        <tr>\r\n          <th>Name</th>\r\n          <th>Number</th>\r\n          <th>Email</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {data?.getAllPerson?.map((person: GetAllPerson_getAllPerson) => (\r\n          <tr key={person.id}>\r\n            <td>{person.name}</td>\r\n            <td>{person.number}</td>\r\n            <td>{person.email}</td>\r\n          </tr>\r\n        ))}\r\n      </tbody>\r\n    </table>\r\n  );\r\n}\r\n\r\nReactDOM.render(\r\n  <ApolloProvider client={client}>\r\n    <div className=\"app\">\r\n      <AllPersonTable />\r\n    </div>\r\n  </ApolloProvider>,\r\n  document.getElementById('root')\r\n);\r\n```\r\n\r\n`npm run dev`를 실행하면, 아래와 같이 정상적으로 데이터를 가져오는 것을 확인할 수 있습니다.  \r\n![npm run dev](/assets/image/2021-09-18-Using-GraphQL-in-React-and-Electron/2021-09-18-Using-GraphQL-in-React-and-Electron_2.png)  \r\n![GraphQL Playground](/assets/image/2021-09-18-Using-GraphQL-in-React-and-Electron/2021-09-18-Using-GraphQL-in-React-and-Electron_3.png)\r\n"},"__N_SSG":true}