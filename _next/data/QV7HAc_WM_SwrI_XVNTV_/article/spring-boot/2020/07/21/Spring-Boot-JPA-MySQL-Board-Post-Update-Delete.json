{"pageProps":{"excerpt":" 앞의 글 에서 글을 조회하는 기능을 만들었습니다. 이번 시간에는 글을 수정하고 삭제하는 기능을 구현해보겠습니다. 게시글 수정 구현하기 글을 조회하는 페이지에서 '수정' 버튼을 누르면, /post/edit/{id} 으로 Get 요청을 합니다. (만약 1번 글에서 '수정' 버튼을 클릭하면","url":"/article/spring-boot/2020/07/21/Spring-Boot-JPA-MySQL-Board-Post-Update-Delete","frontmatter":{"title":"[Spring Boot] 게시판 구현 하기 (3) - 글 수정 및 삭제","date":"2020-07-21 21:09:51","category":"Spring-Boot"},"content":"\n[앞의 글](https://kyuhyuk.kr/article/spring-boot/2020/07/20/Spring-Boot-JPA-MySQL-Board-Post-View)에서 글을 조회하는 기능을 만들었습니다.  \n이번 시간에는 글을 수정하고 삭제하는 기능을 구현해보겠습니다.\n\n## 게시글 수정 구현하기\n\n글을 조회하는 페이지에서 '수정' 버튼을 누르면, `/post/edit/{id}`으로 Get 요청을 합니다. (만약 1번 글에서 '수정' 버튼을 클릭하면 `/post/edit/1`로 접속됩니다.)\n\n우선 게시글을 수정하는 페이지부터 만들어봅시다.  \n`src\\main\\resources\\templates\\board`에 `edit.html`을 아래와 같이 작성합니다.\n\n```html\n<!DOCTYPE html>\n<html lang=\"ko\" xmlns:th=\"http://www.thymeleaf.org\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>게시판 - 글 수정</title>\n    <link rel=\"stylesheet\" href=\"/webjars/bootstrap/4.5.0/css/bootstrap.min.css\" />\n  </head>\n  <body>\n    <header th:insert=\"common/header.html\"></header>\n    <div class=\"container\">\n      <form th:action=\"@{'/post/edit/' + ${post.id}}\" method=\"post\">\n        <input type=\"hidden\" name=\"_method\" value=\"put\" />\n        <input type=\"hidden\" name=\"id\" th:value=\"${post.id}\" />\n        <div class=\"form-group row\">\n          <label for=\"inputTitle\" class=\"col-sm-2 col-form-label\"><strong>제목</strong></label>\n          <div class=\"col-sm-10\">\n            <input\n              type=\"text\"\n              name=\"title\"\n              class=\"form-control\"\n              id=\"inputTitle\"\n              th:value=\"${post.title}\"\n            />\n          </div>\n        </div>\n        <div class=\"form-group row\">\n          <label for=\"inputAuthor\" class=\"col-sm-2 col-form-label\"><strong>작성자</strong></label>\n          <div class=\"col-sm-10\">\n            <input\n              type=\"text\"\n              name=\"author\"\n              class=\"form-control\"\n              id=\"inputAuthor\"\n              th:value=\"${post.author}\"\n            />\n          </div>\n        </div>\n        <div class=\"form-group row\">\n          <label for=\"inputContent\" class=\"col-sm-2 col-form-label\"><strong>내용</strong></label>\n          <div class=\"col-sm-10\">\n            <textarea\n              type=\"text\"\n              name=\"content\"\n              class=\"form-control\"\n              id=\"inputContent\"\n              th:value=\"${post.content}\"\n            ></textarea>\n          </div>\n        </div>\n        <div class=\"row\">\n          <div class=\"col-auto mr-auto\"></div>\n          <div class=\"col-auto\">\n            <input class=\"btn btn-primary\" type=\"submit\" role=\"button\" value=\"수정\" />\n          </div>\n        </div>\n      </form>\n    </div>\n    <script src=\"/webjars/jquery/3.5.1/jquery.min.js\"></script>\n    <script src=\"/webjars/bootstrap/4.5.0/js/bootstrap.min.js\"></script>\n  </body>\n</html>\n```\n\n그리고, `BoardController` 클래스에 `edit()`를 추가합니다.\n\n```java\npackage kr.kyuhyuk.board.controller;\n\nimport kr.kyuhyuk.board.dto.BoardDto;\nimport kr.kyuhyuk.board.service.BoardService;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.PostMapping;\n\nimport java.util.List;\n\n@Controller\npublic class BoardController {\n    private BoardService boardService;\n\n    public BoardController(BoardService boardService) {\n        this.boardService = boardService;\n    }\n\n    @GetMapping(\"/\")\n    public String list(Model model) {\n        List<BoardDto> boardDtoList = boardService.getBoardList();\n        model.addAttribute(\"postList\", boardDtoList);\n        return \"board/list.html\";\n    }\n\n    @GetMapping(\"/post\")\n    public String post() {\n        return \"board/post.html\";\n    }\n\n    @PostMapping(\"/post\")\n    public String write(BoardDto boardDto) {\n        boardService.savePost(boardDto);\n        return \"redirect:/\";\n    }\n\n    @GetMapping(\"/post/{id}\")\n    public String detail(@PathVariable(\"id\") Long id, Model model) {\n        BoardDto boardDto = boardService.getPost(id);\n        model.addAttribute(\"post\", boardDto);\n        return \"board/detail.html\";\n    }\n\n    @GetMapping(\"/post/edit/{id}\")\n    public String edit(@PathVariable(\"id\") Long id, Model model) {\n        BoardDto boardDto = boardService.getPost(id);\n        model.addAttribute(\"post\", boardDto);\n        return \"board/edit.html\";\n    }\n}\n```\n\n서버를 실행하고 '수정' 버튼을 클릭해 보면 아래와 같이 출력되는 것을 확인할 수 있습니다.  \n![Post Edit Page](/assets/image/2020-07-21-Spring-Boot-JPA-MySQL-Board-Post-Update-Delete/2020-07-21-Spring-Boot-JPA-MySQL-Board-Post-Update-Delete_1.png)\n\n위의 화면에서 변경한 후, '수정' 버튼을 누르면 Put 형식으로 `/post/edit/{id}`로 서버에게 요청이 가게됩니다.  \n서버에게 Put 요청이 오게되면, 데이터베이스에 변경된 데이터를 저장해야합니다.  \n`BoardController` 클래스에 `update()`를 구현하여 구현해보겠습니다.\n\n```java\npackage kr.kyuhyuk.board.controller;\n\nimport kr.kyuhyuk.board.dto.BoardDto;\nimport kr.kyuhyuk.board.service.BoardService;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.PutMapping;\n\nimport java.util.List;\n\n@Controller\npublic class BoardController {\n    private BoardService boardService;\n\n    public BoardController(BoardService boardService) {\n        this.boardService = boardService;\n    }\n\n    @GetMapping(\"/\")\n    public String list(Model model) {\n        List<BoardDto> boardDtoList = boardService.getBoardList();\n        model.addAttribute(\"postList\", boardDtoList);\n        return \"board/list.html\";\n    }\n\n    @GetMapping(\"/post\")\n    public String post() {\n        return \"board/post.html\";\n    }\n\n    @PostMapping(\"/post\")\n    public String write(BoardDto boardDto) {\n        boardService.savePost(boardDto);\n        return \"redirect:/\";\n    }\n\n    @GetMapping(\"/post/{id}\")\n    public String detail(@PathVariable(\"id\") Long id, Model model) {\n        BoardDto boardDto = boardService.getPost(id);\n        model.addAttribute(\"post\", boardDto);\n        return \"board/detail.html\";\n    }\n\n    @GetMapping(\"/post/edit/{id}\")\n    public String edit(@PathVariable(\"id\") Long id, Model model) {\n        BoardDto boardDto = boardService.getPost(id);\n        model.addAttribute(\"post\", boardDto);\n        return \"board/edit.html\";\n    }\n\n    @PutMapping(\"/post/edit/{id}\")\n    public String update(BoardDto boardDto) {\n        boardService.savePost(boardDto);\n        return \"redirect:/\";\n    }\n}\n```\n\n위의 작업을 마친 후 `HiddenHttpMethodFilter`를 Bean으로 등록하여, `@PutMapping`과 `@DeleteMapping`이작동할 수 있도록 해줍니다.  \nmain 클래스(`BoardApplication`)에 아래와 같이 `hiddenHttpMethodFilter()` 추가해줍니다.\n\n```java\npackage kr.kyuhyuk.board;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.data.jpa.repository.config.EnableJpaAuditing;\nimport org.springframework.web.filter.HiddenHttpMethodFilter;\n\n@EnableJpaAuditing\n@SpringBootApplication\npublic class BoardApplication {\n\n\tpublic static void main(String[] args) {\n\t\tSpringApplication.run(BoardApplication.class, args);\n\t}\n\n\t@Bean\n\tpublic HiddenHttpMethodFilter hiddenHttpMethodFilter() {\n\t\treturn new HiddenHttpMethodFilter();\n\t}\n}\n```\n\n서버를 실행하고, '안녕하세요' 글을 수정해봅시다. 아래와 같이 변경된 내용이 출력될 것입니다.  \n![Board List](/assets/image/2020-07-21-Spring-Boot-JPA-MySQL-Board-Post-Update-Delete/2020-07-21-Spring-Boot-JPA-MySQL-Board-Post-Update-Delete_2.png)\n\n## 게시글 삭제 구현하기\n\n글을 조회하는 페이지에서 '삭제' 버튼을 누르면, `/post/{id}`으로 Delete 요청을 합니다. (만약 1번 글에서 '삭제' 버튼을 클릭하면 `/post/1`로 접속됩니다.)  \n`id` 값을 사용하여, 해당 글을 데이터베이스에서 삭제하는 것을 구현해보겠습니다.\n\n`BoardService` 클래스에 `deletePost()`를 추가합니다.\n\n```java\npackage kr.kyuhyuk.board.service;\n\nimport kr.kyuhyuk.board.domain.entity.Board;\nimport kr.kyuhyuk.board.domain.repository.BoardRepository;\nimport kr.kyuhyuk.board.dto.BoardDto;\nimport org.springframework.stereotype.Service;\n\nimport javax.transaction.Transactional;\nimport java.util.ArrayList;\nimport java.util.List;\n\n@Service\npublic class BoardService {\n    private BoardRepository boardRepository;\n\n    public BoardService(BoardRepository boardRepository) {\n        this.boardRepository = boardRepository;\n    }\n\n    @Transactional\n    public Long savePost(BoardDto boardDto) {\n        return boardRepository.save(boardDto.toEntity()).getId();\n    }\n\n    @Transactional\n    public List<BoardDto> getBoardList() {\n        List<Board> boardList = boardRepository.findAll();\n        List<BoardDto> boardDtoList = new ArrayList<>();\n\n        for(Board board : boardList) {\n            BoardDto boardDto = BoardDto.builder()\n                    .id(board.getId())\n                    .author(board.getAuthor())\n                    .title(board.getTitle())\n                    .content(board.getContent())\n                    .createdDate(board.getCreatedDate())\n                    .build();\n            boardDtoList.add(boardDto);\n        }\n        return boardDtoList;\n    }\n\n    @Transactional\n    public BoardDto getPost(Long id) {\n        Board board = boardRepository.findById(id).get();\n\n        BoardDto boardDto = BoardDto.builder()\n                .id(board.getId())\n                .author(board.getAuthor())\n                .title(board.getTitle())\n                .content(board.getContent())\n                .createdDate(board.getCreatedDate())\n                .build();\n        return boardDto;\n    }\n\n    @Transactional\n    public void deletePost(Long id) {\n        boardRepository.deleteById(id);\n    }\n}\n```\n\n그리고, `BoardController` 클래스에 `delete()`를 추가하여 `/post/{id}`에 Delete로 요청 오는 것을 처리합니다.\n\n```java\npackage kr.kyuhyuk.board.controller;\n\nimport kr.kyuhyuk.board.dto.BoardDto;\nimport kr.kyuhyuk.board.service.BoardService;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.List;\n\n@Controller\npublic class BoardController {\n    private BoardService boardService;\n\n    public BoardController(BoardService boardService) {\n        this.boardService = boardService;\n    }\n\n    @GetMapping(\"/\")\n    public String list(Model model) {\n        List<BoardDto> boardDtoList = boardService.getBoardList();\n        model.addAttribute(\"postList\", boardDtoList);\n        return \"board/list.html\";\n    }\n\n    @GetMapping(\"/post\")\n    public String post() {\n        return \"board/post.html\";\n    }\n\n    @PostMapping(\"/post\")\n    public String write(BoardDto boardDto) {\n        boardService.savePost(boardDto);\n        return \"redirect:/\";\n    }\n\n    @GetMapping(\"/post/{id}\")\n    public String detail(@PathVariable(\"id\") Long id, Model model) {\n        BoardDto boardDto = boardService.getPost(id);\n        model.addAttribute(\"post\", boardDto);\n        return \"board/detail.html\";\n    }\n\n    @GetMapping(\"/post/edit/{id}\")\n    public String edit(@PathVariable(\"id\") Long id, Model model) {\n        BoardDto boardDto = boardService.getPost(id);\n        model.addAttribute(\"post\", boardDto);\n        return \"board/edit.html\";\n    }\n\n    @PutMapping(\"/post/edit/{id}\")\n    public String update(BoardDto boardDto) {\n        boardService.savePost(boardDto);\n        return \"redirect:/\";\n    }\n\n    @DeleteMapping(\"/post/{id}\")\n    public String delete(@PathVariable(\"id\") Long id) {\n        boardService.deletePost(id);\n        return \"redirect:/\";\n    }\n}\n```\n\n서버를 실행하고, 글을 삭제해봅시다. 아래와 같이 글이 삭제될 것입니다.  \n![Board List](/assets/image/2020-07-21-Spring-Boot-JPA-MySQL-Board-Post-Update-Delete/2020-07-21-Spring-Boot-JPA-MySQL-Board-Post-Update-Delete_3.png)\n"},"__N_SSG":true}